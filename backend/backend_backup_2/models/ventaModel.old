const { pool } = require('../db/database');

// Función para verificar la conexión a la base de datos
const verificarConexion = async () => {
  try {
    const [rows] = await pool.query('SELECT 1');
    console.log('Conexión a la base de datos verificada correctamente');
    return true;
  } catch (error) {
    console.error('Error al verificar la conexión a la base de datos:', error);
    throw new Error('Error de conexión a la base de datos');
  }
};

const ventaModel = {
  // Crear una nueva venta
  async crearVenta(ventaData) {
    console.log('Iniciando creación de venta...');
    console.log('Datos recibidos en el modelo:', JSON.stringify(ventaData, null, 2));
    
    // Verificar conexión a la base de datos
    await verificarConexion();
    
    // Validar y convertir tipos antes de insertar
    const total = parseFloat(ventaData.total);
    const metodo_pago = String(ventaData.metodo_pago);
    const detalles = (ventaData.detalles || []).map(detalle => ({
      producto_id: parseInt(detalle.producto_id),
      cantidad: parseInt(detalle.cantidad),
      precio_unitario: parseFloat(detalle.precio_unitario),
      subtotal: parseFloat(detalle.subtotal)
    }));

    // Validar que todos los productos existen antes de insertar la venta
    const connection = await pool.getConnection();
    try {
      // --- Insertar categoría si es nueva ---
      let categoriaId = null;
      if (ventaData.categoria) {
        // Buscar si existe la categoría
        const [catRows] = await connection.query('SELECT id FROM categorias WHERE nombre = ?', [ventaData.categoria]);
        if (catRows.length > 0) {
          categoriaId = catRows[0].id;
        } else {
          // Insertar nueva categoría
          const [catResult] = await connection.query('INSERT INTO categorias (nombre) VALUES (?)', [ventaData.categoria]);
          categoriaId = catResult.insertId;
        }
      }

      // --- Insertar producto si es nuevo ---
      let productoId = null;
      if (ventaData.producto) {
        // Buscar si existe el producto
        const [prodRows] = await connection.query('SELECT id FROM productos WHERE nombre = ?', [ventaData.producto.nombre]);
        if (prodRows.length > 0) {
          productoId = prodRows[0].id;
        } else {
          // Insertar nuevo producto (requiere categoriaId)
          if (!categoriaId && ventaData.producto.categoria) {
            // Buscar o crear la categoría para el producto
            const [catRows2] = await connection.query('SELECT id FROM categorias WHERE nombre = ?', [ventaData.producto.categoria]);
            if (catRows2.length > 0) {
              categoriaId = catRows2[0].id;
            } else {
              const [catResult2] = await connection.query('INSERT INTO categorias (nombre) VALUES (?)', [ventaData.producto.categoria]);
              categoriaId = catResult2.insertId;
            }
          }
          const [prodResult] = await connection.query('INSERT INTO productos (nombre, precio, categoria_id, stock) VALUES (?, ?, ?, ?)', [ventaData.producto.nombre, ventaData.producto.precio, categoriaId, ventaData.producto.stock || 100]);
          productoId = prodResult.insertId;
        }
      }

      // --- Validar productos ---
      const productoIds = detalles.map(d => d.producto_id);
      if (productoIds.length > 0) {
        const [productosExistentes] = await connection.query(
          `SELECT id FROM productos WHERE id IN (${productoIds.map(() => '?').join(',')})`,
          productoIds
        );
        const idsExistentes = productosExistentes.map(p => p.id);
        const idsFaltantes = productoIds.filter(id => !idsExistentes.includes(id));
        if (idsFaltantes.length > 0) {
          throw new Error(`No existen los siguientes IDs de producto en la base de datos: ${idsFaltantes.join(', ')}`);
        }
      }

      // --- Validar detalles ---
      if (!Array.isArray(detalles) || detalles.length === 0) {
        throw new Error('La venta debe incluir al menos un producto');
      }
      for (const [index, detalle] of detalles.entries()) {
        if (!detalle.producto_id || !detalle.cantidad || !detalle.precio_unitario || !detalle.subtotal) {
          throw new Error(`El detalle en la posición ${index} no tiene todos los campos requeridos`);
        }
      }

      // --- Transacción de venta ---
      console.log('Iniciando transacción...');
      await connection.beginTransaction();
      try {
        console.log('Insertando venta en la base de datos...');
        console.log('Datos de la venta:', { total, metodo_pago });
        
        // 1. Insertar la venta
        const [result] = await connection.query(
          'INSERT INTO ventas (total, metodo_pago) VALUES (?, ?)',
          [Number(total), String(metodo_pago)]
        );
        
        const ventaId = result.insertId;
        console.log('Venta insertada con ID:', ventaId);
        
        // 2. Insertar los detalles de la venta
        console.log('Insertando detalles de la venta...');
        for (const [index, detalle] of detalles.entries()) {
          const producto_id = Number(detalle.producto_id);
          const cantidad = Number(detalle.cantidad);
          const precio_unitario = Number(detalle.precio_unitario);
          const subtotal = Number(detalle.subtotal);

          console.log(`Insertando detalle ${index + 1}:`, { producto_id, cantidad, precio_unitario, subtotal });

          // Validación estricta
          if (!producto_id || !cantidad || isNaN(precio_unitario) || isNaN(subtotal)) {
            console.error(`Detalle de venta inválido en la posición ${index}:`, detalle);
            throw new Error(`Detalle de venta inválido en la posición ${index}`);
          }

          try {
            const [detalleResult] = await connection.query(
              'INSERT INTO detalles_venta (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (?, ?, ?, ?, ?)',
              [
                ventaId,
                producto_id,
                cantidad,
                precio_unitario,
                subtotal
              ]
            );
            console.log(`Detalle ${index + 1} insertado correctamente, ID:`, detalleResult.insertId);
          } catch (error) {
            console.error(`Error SQL al insertar detalle ${index + 1}:`, {
              message: error.message,
              code: error.code,
              errno: error.errno,
              sql: error.sql,
              sqlMessage: error.sqlMessage,
              sqlState: error.sqlState
            });
            throw error;
          }
        }
        
        console.log('Confirmando transacción...');
        await connection.commit();
        console.log('Transacción completada con éxito');
        
        return { 
          id: ventaId, 
          message: 'Venta registrada correctamente',
          detalles: detalles.length
        };
        
      } catch (error) {
        console.error('Error en la transacción, realizando rollback...');
        await connection.rollback();
        console.error('Rollback completado');
        throw error;
      }
      
    } catch (error) {
      console.error('Error en crearVenta:', {
        message: error.message,
        stack: error.stack,
        code: error.code,
        errno: error.errno,
        sql: error.sql,
        sqlMessage: error.sqlMessage,
        sqlState: error.sqlState
      });
      throw error;
    } finally {
      console.log('Liberando conexión...');
      await connection.release();
    }
  },

  // Obtener todas las ventas con sus detalles
  async obtenerVentas() {
    try {
      const [ventas] = await pool.query('SELECT * FROM ventas ORDER BY fecha_venta DESC');
      
      // Obtener los detalles de cada venta
      for (let venta of ventas) {
        const [detalles] = await pool.query(
          'SELECT dv.*, p.nombre as producto_nombre ' +
          'FROM detalles_venta dv ' +
          'JOIN productos p ON dv.producto_id = p.id ' +
          'WHERE dv.venta_id = ?',
          [venta.id]
        );
        venta.detalles = detalles;
      }
      
      return ventas;
    } catch (error) {
      console.error('Error al obtener las ventas:', error);
      throw error;
    }
  },
  
  // Obtener ventas por rango de fechas para reporte de tipo de pago
  async obtenerVentasPorRango(desde, hasta) {
    try {
      const query = `
        SELECT 
          v.id,
          v.fecha_venta,
          v.total,
          v.metodo_pago,
          COALESCE(c.nombre, 'Sin nombre') as cliente_nombre,
          COALESCE(u.nombre, 'Sistema') as usuario_nombre
        FROM ventas v
        LEFT JOIN clientes c ON v.cliente_id = c.id
        LEFT JOIN usuarios u ON v.usuario_id = u.id
        WHERE DATE(v.fecha_venta) BETWEEN ? AND ?
        AND v.estado = 'completada'
        ORDER BY v.fecha_venta DESC
      `;
      
      const [ventas] = await pool.query(query, [desde, hasta]);
      return ventas;
      
    } catch (error) {
      console.error('Error en obtenerVentasPorRango:', error);
      throw error;
    }
  },
  
  // Obtener productos vendidos por rango de fechas
  async obtenerProductosVendidos(desde, hasta) {
    try {
      const [ventasCount] = await pool.query(
        'SELECT COUNT(DISTINCT id) as total_ventas FROM ventas WHERE DATE(fecha_venta) BETWEEN ? AND ?',
        [desde, hasta]
      );
      
      const totalVentas = ventasCount[0] ? ventasCount[0].total_ventas : 0;
      
      const query = `
        SELECT 
          p.id as producto_id,
          p.nombre as producto_nombre,
          c.nombre as categoria_nombre,
          SUM(vd.cantidad) as cantidad_total,
          vd.precio_unitario,
          SUM(vd.subtotal) as subtotal_total,
          COUNT(DISTINCT v.id) as veces_vendido,
          ? as total_ventas_periodo
        FROM ventas v
        JOIN detalles_venta vd ON v.id = vd.venta_id
        JOIN productos p ON vd.producto_id = p.id
        LEFT JOIN categorias c ON p.categoria_id = c.id
        WHERE DATE(v.fecha_venta) BETWEEN ? AND ?
        GROUP BY p.id, p.nombre, c.nombre, vd.precio_unitario
        ORDER BY cantidad_total DESC
      `;
      
      const [productos] = await pool.query(query, [totalVentas, desde, hasta]);
      return productos;
      
    } catch (error) {
      console.error('Error en obtenerProductosVendidos:', error);
      throw error;
    }
  },
  
  // Obtener una venta por su ID
  async obtenerVentaPorId(id) {
    try {
      const [ventas] = await pool.query('SELECT * FROM ventas WHERE id = ?', [id]);
      
      if (ventas.length === 0) {
        return null;
      }
      
      const venta = ventas[0];
      
      // Obtener los detalles de la venta
      const [detalles] = await pool.query(
        'SELECT dv.*, p.nombre as producto_nombre ' +
        'FROM detalles_venta dv ' +
        'JOIN productos p ON dv.producto_id = p.id ' +
        'WHERE dv.venta_id = ?',
        [id]
      );
      
      venta.detalles = detalles;
      return venta;
      
    } catch (error) {
      console.error('Error al obtener la venta:', error);
      throw error;
    }
  },
  
  // Obtener reporte de ventas por rango de fechas
  async obtenerReporteVentas(desde, hasta) {
    try {
      const [ventas] = await pool.query(
        'SELECT ' +
        'DATE(fecha_venta) as fecha, ' +
        'COUNT(*) as total_ventas, ' +
        'SUM(total) as monto_total, ' +
        'AVG(total) as promedio_venta ' +
        'FROM ventas ' +
        'WHERE fecha_venta BETWEEN ? AND ? ' +
        'GROUP BY DATE(fecha_venta) ' +
        'ORDER BY fecha DESC',
        [desde, hasta]
      );
      
      return ventas;
    } catch (error) {
      console.error('Error al generar el reporte de ventas:', error);
      throw error;
    }
  }
    }
  },
  
  // Obtener ventas por rango de fechas para reporte de tipo de pago
  async obtenerVentasPorRango(desde, hasta) {
    try {
      const query = `
        SELECT 
          v.id,
          v.fecha_venta,
          v.total,
          v.metodo_pago,
          COALESCE(c.nombre, 'Sin nombre') as cliente_nombre,
          COALESCE(u.nombre, 'Sistema') as usuario_nombre
        FROM ventas v
        LEFT JOIN clientes c ON v.cliente_id = c.id
        LEFT JOIN usuarios u ON v.usuario_id = u.id
        WHERE DATE(v.fecha_venta) BETWEEN ? AND ?
        AND v.estado = 'completada'
        ORDER BY v.fecha_venta DESC
      `;
      
      const [ventas] = await pool.query(query, [desde, hasta]);
      return ventas;
      
    } catch (error) {
      console.error('Error en obtenerVentasPorRango:', error);
      throw error;
    }
  },
  
  // Obtener productos vendidos por rango de fechas
  async obtenerProductosVendidos(desde, hasta) {
    try {
      const [ventasCount] = await pool.query(
        'SELECT COUNT(DISTINCT id) as total_ventas FROM ventas WHERE DATE(fecha_venta) BETWEEN ? AND ?',
        [desde, hasta]
      );
      
      const totalVentas = ventasCount[0]?.total_ventas || 0;
      
      const query = `
        SELECT 
          p.id as producto_id,
          p.nombre as producto_nombre,
          c.nombre as categoria_nombre,
          SUM(vd.cantidad) as cantidad_total,
          vd.precio_unitario,
          SUM(vd.subtotal) as subtotal_total,
          COUNT(DISTINCT v.id) as veces_vendido,
          ? as total_ventas_periodo
        FROM ventas v
        JOIN detalles_venta vd ON v.id = vd.venta_id
        JOIN productos p ON vd.producto_id = p.id
        LEFT JOIN categorias c ON p.categoria_id = c.id
        WHERE DATE(v.fecha_venta) BETWEEN ? AND ?
        GROUP BY p.id, p.nombre, c.nombre, vd.precio_unitario
        ORDER BY cantidad_total DESC
      `;
      
      const [productos] = await pool.query(query, [totalVentas, desde, hasta]);
      return productos;
      
    } catch (error) {
      console.error('Error en obtenerProductosVendidos:', error);
      throw error;
    }
  },
  
  // Obtener una venta por su ID
  async obtenerVentaPorId(id) {
    try {
      const [ventas] = await pool.query('SELECT * FROM ventas WHERE id = ?', [id]);
      
      if (ventas.length === 0) {
        return null;
      }
      
      const venta = ventas[0];
      
      // Obtener los detalles de la venta
      const [detalles] = await pool.query(
        'SELECT dv.*, p.nombre as producto_nombre ' +
        'FROM detalles_venta dv ' +
        'JOIN productos p ON dv.producto_id = p.id ' +
        'WHERE dv.venta_id = ?',
        [id]
      );
      
      venta.detalles = detalles;
      return venta;
      
    } catch (error) {
      console.error('Error al obtener la venta:', error);
      throw error;
    }
  },
  
  // Obtener reporte de ventas por rango de fechas
  async obtenerReporteVentas(desde, hasta) {
    try {
      const [ventas] = await pool.query(
        'SELECT ' +
        'DATE(fecha_venta) as fecha, ' +
        'COUNT(*) as total_ventas, ' +
        'SUM(total) as monto_total, ' +
        'AVG(total) as promedio_venta ' +
        'FROM ventas ' +
        'WHERE fecha_venta BETWEEN ? AND ? ' +
        'GROUP BY DATE(fecha_venta) ' +
        'ORDER BY fecha DESC',
        [desde, hasta]
      );
      
      return ventas;
    } catch (error) {
      console.error('Error al generar el reporte de ventas:', error);
      throw error;
    }
  }
          v.fecha_venta,
          v.total,
          v.metodo_pago,
          c.nombre as cliente_nombre,
          u.nombre as usuario_nombre
        FROM ventas v
        LEFT JOIN clientes c ON v.cliente_id = c.id
        LEFT JOIN usuarios u ON v.usuario_id = u.id
        WHERE DATE(v.fecha_venta) BETWEEN ? AND ?
        ORDER BY v.fecha_venta DESC
      `;
      
      const [ventas] = await pool.query(query, [desde, hasta]);
      return ventas;
      
    } catch (error) {
      console.error('Error en obtenerReporteVentas:', error);
      throw error;
    }
  },
  
  // Obtener ventas por rango de fechas para reporte de tipo de pago
  async obtenerVentasPorRango(desde, hasta) {
    try {
      const query = `
        SELECT 
          v.id,
          v.fecha_venta,
          v.total,
          v.metodo_pago,
          COALESCE(c.nombre, 'Sin nombre') as cliente_nombre,
          COALESCE(u.nombre, 'Sistema') as usuario_nombre
        FROM ventas v
        LEFT JOIN clientes c ON v.cliente_id = c.id
        LEFT JOIN usuarios u ON v.usuario_id = u.id
        WHERE DATE(v.fecha_venta) BETWEEN ? AND ?
        AND v.estado = 'completada'
        ORDER BY v.fecha_venta DESC
      `;
      
      const [ventas] = await pool.query(query, [desde, hasta]);
      return ventas;
      
    } catch (error) {
      console.error('Error en obtenerVentasPorRango:', error);
      throw error;
    }
  },

  // Obtener productos vendidos por rango de fechas con totales
  async obtenerProductosVendidos(desde, hasta) {
    try {
      // Primero obtenemos el conteo total de ventas en el rango de fechas
      const [ventasCount] = await pool.query(
        'SELECT COUNT(DISTINCT id) as total_ventas FROM ventas WHERE DATE(fecha_venta) BETWEEN ? AND ?',
        [desde, hasta]
      );
      
      const totalVentas = ventasCount[0]?.total_ventas || 0;
      
      // Luego obtenemos los productos vendidos
      const query = `
        SELECT 
          p.id as producto_id,
          p.nombre as producto_nombre,
          c.nombre as categoria_nombre,
          SUM(vd.cantidad) as cantidad_total,
          vd.precio_unitario,
          SUM(vd.subtotal) as subtotal_total,
          COUNT(DISTINCT v.id) as veces_vendido,
          ? as total_ventas_periodo
        FROM ventas v
        JOIN detalles_venta vd ON v.id = vd.venta_id
        JOIN productos p ON vd.producto_id = p.id
        LEFT JOIN categorias c ON p.categoria_id = c.id
        WHERE DATE(v.fecha_venta) BETWEEN ? AND ?
        GROUP BY p.id, p.nombre, c.nombre, vd.precio_unitario
        ORDER BY cantidad_total DESC`;
        
      const [rows] = await pool.query(query, [totalVentas, desde, hasta]);
      return rows;
    } catch (error) {
      console.error('Error al obtener el reporte de productos vendidos:', error);
      throw error;
    }
  },

  // Obtener una venta por su ID
  async obtenerVentaPorId(id) {
    try {
      const [ventas] = await pool.query('SELECT * FROM ventas WHERE id = ?', [id]);
      
      if (ventas.length === 0) {
        return null;
      }
      
      const venta = ventas[0];
      
      // Obtener los detalles de la venta
      const [detalles] = await pool.query(
        'SELECT dv.*, p.nombre as producto_nombre ' +
        'FROM detalles_venta dv ' +
        'JOIN productos p ON dv.producto_id = p.id ' +
        'WHERE dv.venta_id = ?',
        [id]
      );
      
      venta.detalles = detalles;
      return venta;
      
    } catch (error) {
      console.error('Error al obtener la venta:', error);
      throw error;
    }
  },

  // Obtener reporte de ventas por rango de fechas
  async obtenerReporteVentas(desde, hasta) {
    try {
      const [ventas] = await pool.query(
        'SELECT ' +
        'DATE(fecha_venta) as fecha, ' +
        'COUNT(*) as total_ventas, ' +
        'SUM(total) as monto_total, ' +
        'AVG(total) as promedio_venta ' +
        'FROM ventas ' +
        'WHERE fecha_venta BETWEEN ? AND ? ' +
        'GROUP BY DATE(fecha_venta) ' +
        'ORDER BY fecha DESC',
        [desde, hasta]
      );
      
      return ventas;
    } catch (error) {
      console.error('Error al generar el reporte de ventas:', error);
      throw error;
    }
  }
};

module.exports = ventaModel;
